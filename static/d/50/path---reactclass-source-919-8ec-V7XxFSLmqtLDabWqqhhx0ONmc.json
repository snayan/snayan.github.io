{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"7c4cc46d-78d0-5509-8c77-3e51d35cff6f","excerpt":"ReactClass对象为React提供了方法，实际上ReactClass有2个属性，一个是，另外一个是对象。，接受1个参数，一个对象，这个对象必须包含方法；结果返回一个构造函数。注意，方法将在16.X版本中移除了，所以现在要用es6的语法了。  继承ReactComponent并重写，的代码：  Mixin…","html":"<p>ReactClass对象为React提供了<code class=\"language-text\">createClass</code>方法，实际上ReactClass有2个属性，一个是<code class=\"language-text\">createClass</code>，另外一个是<code class=\"language-text\">injection</code>对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ReactClass<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">createClass</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">spec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//createClass实现</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  injection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">injectMixin</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mixin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      injectedMixins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!--more-->\n<ul>\n<li><code class=\"language-text\">createClass</code>，接受1个参数，一个对象，这个对象必须包含<code class=\"language-text\">render</code>方法；结果返回一个构造函数。注意，<code class=\"language-text\">createClass</code>方法将在16.X版本中移除了，所以现在要用es6的<code class=\"language-text\">class</code>语法了。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createClass</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">spec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Constructor</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span>context<span class=\"token punctuation\">,</span>updater</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//这段代码是不是很熟悉，跟component里的一样。</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token operator\">=</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token operator\">=</span>context<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs<span class=\"token operator\">=</span>emptyObject<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token operator\">=</span>updater<span class=\"token operator\">||</span> ReactNoopUpdaterQueue<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//获取初始化的state</span>\n      <span class=\"token keyword\">var</span> initialState<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getInitialState<span class=\"token operator\">?</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//getInitialState()必须返回对象</span>\n      <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> initialState<span class=\"token operator\">===</span><span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token string\">'提示报错'</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span>initialState<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//继承ReactComponent，并重写replaceState和isMounted</span>\n      <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactClassComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">=</span>Constructor<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//mixin提前注入的对象,通过ReactClass.injection.injectMixin注入</span>\n      injectedMixins<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">mixSpecIntoComponent</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>Constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//Mixin一些其他的属性</span>\n      <span class=\"token function\">mixSpecIntoComponent</span><span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">,</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//赋值初始化的props</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">.</span>getDefaultProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Constructor<span class=\"token punctuation\">.</span>defaultProps<span class=\"token operator\">=</span>Constructor<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">//判断是否有render方法，没有就报错</span>\n      <span class=\"token operator\">!</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>render<span class=\"token operator\">?</span><span class=\"token string\">'提示报错'</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//赋值没有定义的默认的生命周期的函数为null</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> methodName <span class=\"token keyword\">in</span> ReactClassInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//返回构造函数</span>\n  <span class=\"token keyword\">return</span> Constructor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>  继承ReactComponent并重写<code class=\"language-text\">replaceState</code>，<code class=\"language-text\">isMounted</code>的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Mixin replaceState和isMounted的对象</span>\n<span class=\"token keyword\">var</span> ReactClassMixin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">replaceState</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newState<span class=\"token punctuation\">,</span>callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueReplaceStaet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>callback<span class=\"token punctuation\">,</span><span class=\"token string\">'replaceState'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">isMounted</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">isMounted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//合并ReactComponent.prototype，和 ReactClassMixin</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">ReactClassComponent</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReactClassComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span><span class=\"token class-name\">ReactComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span>ReactClassMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//继承ReactClassComponent</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactClassComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">=</span>Constructor<span class=\"token punctuation\">;</span></code></pre></div>\n<p>  Mixin一些其他的属性的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">RESERVED_SPEC_KEYS</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">displayName</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>displayName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Constructor<span class=\"token punctuation\">.</span>displayName<span class=\"token operator\">=</span>displayName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">mixins</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>mixins</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mixins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>mixins<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mixSpecIntoComponent</span><span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">childContextTypes</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">COnstrcutor<span class=\"token punctuation\">,</span>childContextTypes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//.....</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">contextTypes</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>contextTypes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//......</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getDefaultProps</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>getDefaultProps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//....</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">propTypes</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>propTypes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//....</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">statics</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>statics</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//....</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">autobind</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mixSpecIntoComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor<span class=\"token punctuation\">,</span>spec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//如果spec中有mixins，则合并</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mixins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">RESERVED_SPEC_KEYS</span><span class=\"token punctuation\">.</span><span class=\"token function\">mixins</span><span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">,</span>spec<span class=\"token punctuation\">.</span>mixins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> proto<span class=\"token operator\">=</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name <span class=\"token keyword\">in</span> spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spec<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">===</span><span class=\"token string\">'mixins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//第一步已经合并了mixins属性了，所以此处不需要再次合并</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> property<span class=\"token operator\">=</span>spec<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//合并保留的关键属性</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RESERVED_SPEC_KEYS</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">RESERVED_SPEC_KEYS</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Constructor<span class=\"token punctuation\">,</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//合并自定义的属性</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">injection</code>，通过调用<code class=\"language-text\">ReactClass.injection.injectMixin</code>可以全局注入需要mixin的对象，此后在调用<code class=\"language-text\">ReactClass.createClass(spec)</code>的时候就不需要在单独注入了。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> injection <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">injectMixin</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mixin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    injectedMixins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>  ​react版本15.5.4。</p>","frontmatter":{"title":"阅读react源码--createClass部分","date":"May 22, 2017","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/reactclass_source/","previous":{"fields":{"slug":"/react_component_source/"},"frontmatter":{"title":"阅读react源码--component部分"}},"next":{"fields":{"slug":"/reactelement_source/"},"frontmatter":{"title":"阅读react源码--ReactElement部分"}}}}