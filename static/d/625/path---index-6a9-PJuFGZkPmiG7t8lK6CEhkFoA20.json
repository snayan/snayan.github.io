{"data":{"site":{"siteMetadata":{"title":"三洋的小站"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"好快，2018 没了。2018 年初计划是：去腾讯或者阿里 【没有完成】阅读 12 本书 【基本完成】写 12 篇笔记 【完成】学习 canvas 相关 【完成】学习 vue 相关 【完成】弄清楚 vue-cli 实现细节 【完成】弄清楚 Snabbdom…","fields":{"slug":"/post/summary_of_2018/"},"frontmatter":{"date":"January 02, 2019","title":"2018年小结"}}},{"node":{"excerpt":"在跨平台客户端开发中，H5 是使用最为广泛的方式，它既可以运行在 iOS 中，也可以运行在 Android 中，还可以运行在 web 浏览器中，可以说是”write once, run anywhere”。但是，H5 最为人诟病的就是用户体验不如 native…","fields":{"slug":"/post/understand_the_details_of_h5_and_native(ios)_communication/"},"frontmatter":{"date":"December 31, 2018","title":"理解h5与native(ios)通信细节"}}},{"node":{"excerpt":"最近想了解一下 React 和 Vue 框架分别在 virtual dom 部分的实现，以及他们的不同之处。于是先翻开 Vue 的源码去找 virtual dom 的实现，看到开头，它就提到了 Vue 的 virtual dom 更新算法是基于 Snabbdom…","fields":{"slug":"/post/understand_the_details_of_vritual_dom_snabbdom/"},"frontmatter":{"date":"December 31, 2018","title":"理解virtual dom的实现细节-snabbdom"}}},{"node":{"excerpt":"1. Cannot read property ‘catch’ of undefined原因：在调用 play()时，现代浏览器返回的是一个 promise，对于执行失败的，会触发一个 Unhandled Promise Rejection，但是对于低版本的浏览器，调用 play…","fields":{"slug":"/post/resolve_issue_of_using_audio/"},"frontmatter":{"date":"December 17, 2018","title":"HTML5中Audio使用踩坑汇总"}}},{"node":{"excerpt":"最近在项目碰到了一个 vue 组件更新导致 style 异常的问题。下面记录一下我自己的解决思路。问题背景由于公司项目业务复杂，就不具体描述了。简单说一下问题，就是项目使用 vue 框架，在一个页面中根据 a 值来显示不同组件，当时显示 A 组件，否则就显示 B…","fields":{"slug":"/post/resolve_vue_style_update_problem/"},"frontmatter":{"date":"December 03, 2018","title":"看vue源码解决组件style更新问题"}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第六篇，完整笔记详见：canvas 核心技术。在上一篇canvas…","fields":{"slug":"/post/how_to_detect_collision/"},"frontmatter":{"date":"August 26, 2018","title":"canvas-核心技术-如何实现碰撞检测"}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第五篇，完整笔记详见：canvas 核心技术。在上一篇canvas 核心技术-如何实现简单的动画笔记中，我们详细学习了如何进行 canvas…","fields":{"slug":"/post/how_to_implement_complex_animations/"},"frontmatter":{"date":"August 19, 2018","title":"canavs核心技术-如何实现复杂的动画"}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第四篇，完整笔记详见：canvas 核心技术。在前面几篇中，我们回顾了在 canvas 中绘制线段，图形，图片等基本功能，当在制作 2d 游戏或者更为丰富的图表库时，必须提供强大的动画功能。canvas 本身不提供像 css…","fields":{"slug":"/post/how_to_implement_simple_animations/"},"frontmatter":{"date":"August 11, 2018","title":"canvas核心技术-如何实现简单的动画"}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第三篇，完整笔记详见：canvas 核心技术通过上一篇canvas 核心技术-如何绘制图形的学习，我们知道了如何绘制任意多边形以及图片的填充规则。在 canvas…","fields":{"slug":"/post/how_to_draw_image_and_text/"},"frontmatter":{"date":"July 27, 2018","title":"canvas核心技术-如何绘制图片和文本"}}},{"node":{"excerpt":"这篇学习和回顾 canvas 系列笔记的第二篇，完整笔记详见：canvas 核心技术通过上一篇canvas 核心技术-如何绘制线段的学习，我们知道了如何去绘制线段。很多的线段的拼接就组成了图形了，比如常见的三角形，矩形，圆形等。常见图形的绘制可以查看我的在线示例：canvas…","fields":{"slug":"/post/how_to_draw_graphics/"},"frontmatter":{"date":"July 18, 2018","title":"canvas核心技术-如何绘制图形"}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第一篇，完整笔记详见：canvas 核心技术\n学习 canvas，首先得知道如何去绘制线段，然后才能通过很多简单的线段去实现比较复杂的图形，比如常见的图表，柱状图，折线图等都是通过一段一段的线段实现的。基础知识canvas…","fields":{"slug":"/post/how_to_draw_line/"},"frontmatter":{"date":"July 09, 2018","title":"canvas核心技术-如何绘制线段"}}},{"node":{"excerpt":"最近项目需求中要写较多 H5 小游戏，游戏本身体量不是很复杂，主要是承载较多业务逻辑，所以决定用 canvas 来完成游戏部分。之前只是知道 H5 中有 canvas 这个东西，也知道它大概是画图的，但具体怎么用，还是一无所知的。在MDN在看了一些相关资料，一口气也看了HTML…","fields":{"slug":"/post/core_html5_canvas/"},"frontmatter":{"date":"July 09, 2018","title":"canvas核心技术"}}},{"node":{"excerpt":"现在前端项目的构建一般基本都是基于 webpack 的。项目的技术栈目前比较主流的是 react 全家桶和 vue 全家桶。\n趁空闲，以公司一个项目整理了 webpack 构建常见的流程,这个项目是使用 vue 全家桶开发的。技术栈vuetypescript…","fields":{"slug":"/post/process_of_webpack_build_project/"},"frontmatter":{"date":"June 27, 2018","title":"webpack构建常见流程"}}},{"node":{"excerpt":"目的这个项目主要是用 vue+vuex 实现一个单页面应用，纯粹是熟悉 vue 全家桶相关开发模式，用于练手非常合适。\n着手开发完了之后可以学的东西：熟悉 vue 单文件组件开发方式熟悉如何写一个 vue 插件熟悉如何使用 vue-router 以及挂载路由钩子函数熟悉 vuex…","fields":{"slug":"/post/vue_technology_stack/"},"frontmatter":{"date":"June 15, 2018","title":"vue 全家桶初探"}}},{"node":{"excerpt":"React 中比较重要的就是React elements了，可以理解为页面中可看到的节点元素。结构一个React element的结构为下面这样，\n可以看到比较重要的几个属性：$$typeof，key，props，ref，type。$$typeof：固定为，在验证React…","fields":{"slug":"/post/learn_react16_part4/"},"frontmatter":{"date":"April 11, 2018","title":"react 16学习(四)"}}},{"node":{"excerpt":"ReactDom 在 16 版本中也新增了一些新的功能，比如createPortal，hydrate。今天主要学习一下createPortal。\n先看下 ReactDom 的大致包含的一些属性和方法。可以看到我们熟悉的，，。这里面新增了两个新的方法和。以 unstable…","fields":{"slug":"/post/learn_react16_part3/"},"frontmatter":{"date":"April 04, 2018","title":"react 16学习(三)"}}},{"node":{"excerpt":"上篇大致说了 react16 的结构，今天来看看 react16 中新增的 Fragment。react16 中新增的可以渲染的类型：和。Fragments在 react16 中，的方法现在可以返回一个数组了，而在 react1…","fields":{"slug":"/post/learn_react16_part2/"},"frontmatter":{"date":"March 02, 2018","title":"React 16学习(二)"}}},{"node":{"excerpt":"趁着离职期这段时间，制定了一个计划，再次阅读 React16 的源码，React16 是一个大版本的更新，其中新增了许多的新特性，并且重写了核心模块的架构，叫做Fiber，最令人兴奋的是async rendering。之前也浅显的阅读过 React1…","fields":{"slug":"/post/learn_react16_part1/"},"frontmatter":{"date":"March 01, 2018","title":"React 16学习(-)"}}},{"node":{"excerpt":"在某次求职过程中，收到了一个笔试题，要求写一个人机对战的五子棋，题目要求如下：请编写一个单机【五子棋】游戏，要求如下：\n使用原生技术实现，兼容 Chrome 浏览器即可。\n实现胜负判断，并给出赢棋提示；任意玩家赢得棋局，锁定棋盘。\n请尽可能的考虑游戏的扩展性，界面可以使用 DOM…","fields":{"slug":"/post/gomoku/"},"frontmatter":{"date":"January 23, 2018","title":"简单的五子棋"}}},{"node":{"excerpt":"嗯，又到了年末，是时候对 17 年做个了断，好好开始 18 年。\n17 年的年初计划是：找一家靠谱的互联网公司阅读 12 本书报个英语培训班找一家靠谱的互联网公司年初，3 月份从广田智能来到了深圳卷皮，是找到了一家互联网公司，很互联网 😂。\n从 PC…","fields":{"slug":"/post/summary_of_2017/"},"frontmatter":{"date":"December 14, 2017","title":"2017年小结"}}},{"node":{"excerpt":"最近一个月都在忙公司的新项目会过精选，加上双11大促，真的是很忙。加上最近的烦心事比较多，心情一直不是很好，做什么事情，都效率低下。收拾收拾心情，继续努力吧。一切都不会那么糟糕。在做会过精选M站时，我们前端组选型的技术栈是React,Redux,TypeScript…","fields":{"slug":"/post/note_of_decorator/"},"frontmatter":{"date":"November 26, 2017","title":"笔记之decorator"}}},{"node":{"excerpt":"在开发微信小程序时，发现缺少了组件化开发体验，在网上找了一波资源，发现都不是很好。其中，有用开发Vue的方式去开发小程序，比如，WePY…","fields":{"slug":"/post/mini_program_component_programming/"},"frontmatter":{"date":"September 17, 2017","title":"小程序组件化编程"}}},{"node":{"excerpt":"一直想抽时间总结一下现在业界可用的移动端布局方案。需求多，995模式，身心被掏空，一拖再拖，终于在周六的晚上，做着梦弄完成的，不足之道😪，请指教改正🤠。media…","fields":{"slug":"/post/mobile-layout/"},"frontmatter":{"date":"July 31, 2017","title":"移动端布局方案浅谈"}}},{"node":{"excerpt":"在做响应式图片加载需要使用到的两个关键属性就是和 ，这两个属性是H5中新加的，是给img标签提供多个不同尺寸的图片，在不同设备，不同分辨率的情况下加载不同的图片。根据屏幕分辨率选择当只需要根据屏幕分辨率去选择不同的图片的时候，有2种情况。第1种，语法形式为：一般屏幕的分辨率会到…","fields":{"slug":"/post/img_srcset_seizes/"},"frontmatter":{"date":"July 24, 2017","title":"响应式图片加载"}}},{"node":{"excerpt":"看了这么多框架方面的东西，但注意，基础很重要。今天就来说说javascipt中容易忽略的类型转换问题。\n在javascript中有…","fields":{"slug":"/post/explanatio_of_ToPrimitive/"},"frontmatter":{"date":"July 06, 2017","title":"javascript中ToPrimitive详解"}}},{"node":{"excerpt":"众所周知，react的组件是有一个个的钩子函数，构建成的生命周期，在用es6的class与用createClass有所不同，其中createClass还包括了与。由于createClass 将在后续版本中移除，建议使用class形式。所以，下面讨论的都是class…","fields":{"slug":"/post/react_component_life_cycle/"},"frontmatter":{"date":"June 19, 2017","title":"react组件生命周期浅谈"}}},{"node":{"excerpt":"ReactMount为react-dom对象提供了和这2个方法，其中第一个就是我们常用的输出react element到真实的dom里。方法实际上提供了三个参数，第一个就是react element，第二个是页面上真实的dom，第三个是callback。如果react…","fields":{"slug":"/post/reactdom_reactmount_source/"},"frontmatter":{"date":"June 10, 2017","title":"阅读react-dom源码--ReactMount部分"}}},{"node":{"excerpt":"ReactElement对象为React提供了，，，四个方法。ReactElement是一个工厂方法，不是类模式，不要使用去调用。检查一个对象是否是react element对象，通过检查这个对象的是否等于，第一个参数是，实际是一个Component…","fields":{"slug":"/post/reactelement_source/"},"frontmatter":{"date":"May 30, 2017","title":"阅读react源码--ReactElement部分"}}},{"node":{"excerpt":"ReactClass对象为React提供了方法，实际上ReactClass有2个属性，一个是，另外一个是对象。，接受1个参数，一个对象，这个对象必须包含方法；结果返回一个构造函数。注意，方法将在16.X版本中移除了，所以现在要用es6的语法了。  继承ReactComponent…","fields":{"slug":"/post/reactclass_source/"},"frontmatter":{"date":"May 22, 2017","title":"阅读react源码--createClass部分"}}},{"node":{"excerpt":"今天主要看下，实际上是对象上一个构造函数。\n构造函数接受三个参数，，，，实际是在中注入的，它是用来实际更新Component…","fields":{"slug":"/post/react_component_source/"},"frontmatter":{"date":"May 09, 2017","title":"阅读react源码--component部分"}}},{"node":{"excerpt":"最近打算学习react与redux的源码，以此记录在学习过程中做的笔记吧。\n先来整体看看react的结构吧，实际上react就是一个对象，在实际使用的时候是这样的方式查看源码发现，react…","fields":{"slug":"/post/react_whole_construct/"},"frontmatter":{"date":"May 04, 2017","title":"阅读react源码--react整体结构"}}},{"node":{"excerpt":"单例模式，简单的说就是保证一个特定的类仅有一个实例，也就是不管实例化几次，都是返回的同一个实例。在javascript中，没有类的概念，每一个对象字面量都可以是认为是一个单例。对象全等，表示引用的同一个内存地址。在javascript…","fields":{"slug":"/post/singleton/"},"frontmatter":{"date":"May 02, 2017","title":"单例模式"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}