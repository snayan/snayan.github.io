{"data":{"site":{"siteMetadata":{"title":"三羊的小站","postLimit":10,"menu":{"search":{"name":"搜索","link":"/search"}}}},"allMarkdownRemark":{"totalCount":47,"edges":[{"node":{"excerpt":"本来不想写2020年小结，感觉没啥可写的，老婆却每天提醒我，该写总结了，絮絮叨叨的。想着，也是不管怎样，还是回顾总结一下，给自己一个交待，同时也需要制定下一年的计划和目标了。2020年，带了一年的口罩，实在是有点憋得慌。婚后第一年，日子如往常一样，快乐大于悲伤。5月份，迎来了另…","fields":{"slug":"/post/2021/summary_of_2020/"},"frontmatter":{"date":"January 06, 2021","title":"2020年小结","tags":["2020","summary"]}}},{"node":{"excerpt":"还记得我们在第一篇中说过，当前rIC实现版本有一条不足之处，当浏览器切换到其他tab或者后台时，浏览器会出于优化考虑不执行rAF（可查看Background Tabs in Chrome），而 rIC polyfill 的实现依赖rAF的实现，所以rIC也会得不到执行。为了解决…","fields":{"slug":"/post/2020/react_time-slice_3/"},"frontmatter":{"date":"November 15, 2020","title":"React Time Slice（三） -   requestIdleCallback polyfill","tags":["react","time slice"]}}},{"node":{"excerpt":"在上一篇文章中，我们分析和理解了 React v16.0.0 中是如何实现  最基础功能的，以及指出了一些不足之处，其中之一就是没有支持多个 callback 的特性。本篇是 React Time Slice 系列中的第二篇，学习 React 团队是如何为 rIC 支持多个 c…","fields":{"slug":"/post/2020/react_time-slice_2/"},"frontmatter":{"date":"September 16, 2020","title":"React Time Slice（二） -   requestIdleCallback polyfill","tags":["react","time slice"]}}},{"node":{"excerpt":"React 从 v16.0.0 开始，实现了异步渲染模式（Concurrency Mode），解决了之前 Stack Reconciler 采用同步更新的问题。异步渲染，实际上就是将一个大的渲染任务，分成很多个小的任务，每个任务执行完就交出主线程，使得其他线程可以处理其他事情（…","fields":{"slug":"/post/2020/react_time-slice_1/"},"frontmatter":{"date":"September 02, 2020","title":"React Time Slice（-） -   requestIdleCallback polyfill","tags":["react","time slice"]}}},{"node":{"excerpt":"最近给组内同事做了一次技术分享，有关 React fiber 的。内容涉及了 Stack reconciler，Fiber reconciler，以及它们之间的区别。事后整理了下文字稿，篇幅有点长，内容如下。react 中，一个 virtual dom 是使用 element …","fields":{"slug":"/post/2020/stack_reconciler_vs_fiber_reconciler/"},"frontmatter":{"date":"July 13, 2020","title":"React Fiber 分享","tags":["react","fiber"]}}},{"node":{"excerpt":"2019 年，还算比较充实。按照年初定的目标，大部分完成了，除了 12 篇文章，目前只完成了 9 篇。Blog 使用 gastby 重构学习数据结构和算法 【读了 4 本书籍和一个专栏】学习了解 flutter【写了 2 个 demo，做了一个分享，写了三篇文章】阅读 12 本…","fields":{"slug":"/post/2020/summary_of_2019/"},"frontmatter":{"date":"January 03, 2020","title":"2019年小结","tags":["2019","summary"]}}},{"node":{"excerpt":"上一篇文章中，我们学习了 flutter 中三个主要的 widget，分别是 StatelessWidget，StatefulWidget，和 RenderObjectWidget；也简单介绍了 Widget，Element 和 RenderObject 之间的关系。这一篇，将…","fields":{"slug":"/post/2019/flutter-learn-3/"},"frontmatter":{"date":"November 30, 2019","title":"flutter 学习小结（三）","tags":["flutter"]}}},{"node":{"excerpt":"上一篇文章中，学习了 flutter 跨平台的特性，以及 dart 的包管理器 pub。这一篇，我们将详细了解 flutter 很重要的一个概念，widget。flutter 是响应式的，它通过编程方式去写 UI 页面，而不是像 html 或者 android 中的 xml 等…","fields":{"slug":"/post/2019/flutter-learn-2/"},"frontmatter":{"date":"November 26, 2019","title":"flutter 学习小结（二）","tags":["flutter"]}}},{"node":{"excerpt":"2019 年，在前端圈听到最多的就是 flutter 了。作为一个跨平台新宠，国内已有一些大厂，将它用在了实际的项目中。对于一个新技术，到底要不要跟进学习，笔者不做任何评论。笔者只是纯粹以学习的目的，去学习了 flutter，并通过写一个 demo 加深对它的理解。下面将结合自…","fields":{"slug":"/post/2019/flutter-learn-1/"},"frontmatter":{"date":"November 16, 2019","title":"flutter 学习小结（一）","tags":["flutter"]}}},{"node":{"excerpt":"Babel，是一个 JavaScript 的编译工具，它可以将 es6+语法的代码，转换为浏览器兼容的低版本的代码。它简直就是一个神兵利器，前端工程师拥有了它，就可以在项目中使用一些较新的 es 语法。笔者决定弄懂它，并实现一个自己的 Babel 插件。Babel 的工作原理，…","fields":{"slug":"/post/2019/diy_a_babel_plugin/"},"frontmatter":{"date":"August 06, 2019","title":"DIY 一个 Babel 插件","tags":["babel"]}}},{"node":{"excerpt":"跳表是基于链表建立多级索引的动态数据结构跳表的查询时间复杂度是 ，而单链表的查询时间复杂度是 跳表需要额外的内存空间存储索引，实现空间换时间动态插入，删除数据时，跳表需要维护索引大小平衡性，避免退化为单链表跳表是一种高效的动态数据结构，它是基于链表实现的。在遍历有序单链表中，需…","fields":{"slug":"/post/2019/algorithm_skip_list/"},"frontmatter":{"date":"July 20, 2019","title":"数据结构和算法-跳表的原理及实现","tags":["algorithm","javascript"]}}},{"node":{"excerpt":"在前端性能优化策略中，耳熟能详的手段有，雅虎 35 条军规，使用 cache，减少请求数量，使用cookie-free domain，critical asset，使用 CDN，Lazy load，PreLoad 等，这些手段其实主要都是围绕怎么样更快的拿到所需关键资源。当我们…","fields":{"slug":"/post/2019/in_depth_animation_frame/"},"frontmatter":{"date":"May 27, 2019","title":"深入浅出动画帧","tags":["animation","frame"]}}},{"node":{"excerpt":"基础数据结构，最基础的就只有两种，一个是数组，一个是链表。其他的数据结构都是在它们之上抽象出来的，比如，栈，队列，散列表，树，图等。数组在内存中是申请的一组连续的内存空间，在一些强类型语言中，初始化数组时是要事先指定数组大小和类型的，一旦完成，则数组大小和类型不可改变。我们常说…","fields":{"slug":"/post/2019/algorithm_basic_data_structure/"},"frontmatter":{"date":"May 08, 2019","title":"数据结构和算法-基础数据结构","tags":["algorithm","javascript"]}}},{"node":{"excerpt":"数据结构和算法，在程序员的知识体系中应该是占据非常重要的位置，特别是对于后端工程师。对于一个前端仔，确实很少用到复杂的数据结构和算法，更多的是与前端框架，项目配置，页面性能，浏览器兼容等打交道。前端技术飞速发展，前端框架层出不穷，现在很多人都感叹”学不动了”。为何会感觉学不动了…","fields":{"slug":"/post/2019/alorithm_outline_of_knowledge/"},"frontmatter":{"date":"April 26, 2019","title":"数据结构和算法-前端必会知识点","tags":["algorithm","javascript"]}}},{"node":{"excerpt":"最近老板来了一个新需求，地理位置组团。其中一个功能点，就是用户可以进入地图页面，查看当前自身位置，且扫描圈内和圈外其他玩家，将玩家头像显示在地图页面上，标明玩家在哪个位置。老板说，在地图上要可以同时显示 200 个玩家头像，且保证页面流畅；Android6 的手机上，在拖拽，缩…","fields":{"slug":"/post/2019/optimize_map_page/"},"frontmatter":{"date":"April 13, 2019","title":"性能优化篇-地图页面","tags":["performance","javascript"]}}},{"node":{"excerpt":"好快，2018 没了。2018 年初计划是：去腾讯或者阿里 【没有完成】阅读 12 本书 【基本完成】写 12 篇笔记 【完成】学习 canvas 相关 【完成】学习 vue 相关 【完成】弄清楚 vue-cli 实现细节 【完成】弄清楚 Snabbdom 实现细节 【完成】弄…","fields":{"slug":"/post/2019/summary_of_2018/"},"frontmatter":{"date":"January 02, 2019","title":"2018年小结","tags":["2018","summary"]}}},{"node":{"excerpt":"在跨平台客户端开发中，H5 是使用最为广泛的方式，它既可以运行在 iOS 中，也可以运行在 Android 中，还可以运行在 web 浏览器中，可以说是”write once, run anywhere”。但是，H5 最为人诟病的就是用户体验不如 native 流畅，特别是对于…","fields":{"slug":"/post/understand_the_details_of_h5_and_native(ios)_communication/"},"frontmatter":{"date":"December 31, 2018","title":"理解h5与native(ios)通信细节","tags":["h5","bridge"]}}},{"node":{"excerpt":"最近想了解一下 React 和 Vue 框架分别在 virtual dom 部分的实现，以及他们的不同之处。于是先翻开 Vue 的源码去找 virtual dom 的实现，看到开头，它就提到了 Vue 的 virtual dom 更新算法是基于 Snabbdom 实现的。于是，…","fields":{"slug":"/post/understand_the_details_of_vritual_dom_snabbdom/"},"frontmatter":{"date":"December 31, 2018","title":"理解virtual dom的实现细节-snabbdom","tags":["h5","vue","vdom"]}}},{"node":{"excerpt":"原因：在调用 play()时，现代浏览器返回的是一个 promise，对于执行失败的，会触发一个 Unhandled Promise Rejection，但是对于低版本的浏览器，调用 play()并不会返回一个 promise。解决：应该在调用 play()时做如下处理，增加对…","fields":{"slug":"/post/resolve_issue_of_using_audio/"},"frontmatter":{"date":"December 17, 2018","title":"HTML5中Audio使用踩坑汇总","tags":["h5","audio"]}}},{"node":{"excerpt":"最近在项目碰到了一个 vue 组件更新导致 style 异常的问题。下面记录一下我自己的解决思路。由于公司项目业务复杂，就不具体描述了。简单说一下问题，就是项目使用 vue 框架，在一个页面中根据 a 值来显示不同组件，当时显示 A 组件，否则就显示 B 组件。示例代码如下如上…","fields":{"slug":"/post/resolve_vue_style_update_problem/"},"frontmatter":{"date":"December 03, 2018","title":"看vue源码解决组件style更新问题","tags":["vue"]}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第六篇，完整笔记详见：canvas 核心技术。在上一篇canvas 核心技术-如何实现复杂的动画笔记中，我们详细讨论了在制作复杂动画时，需要考虑时间因素，物理因素等，同时还回顾了如何使用缓动函数来扭曲时间轴实现非线性运动，比如常见的缓入…","fields":{"slug":"/post/how_to_detect_collision/"},"frontmatter":{"date":"August 26, 2018","title":"canvas-核心技术-如何实现碰撞检测","tags":["canvas"]}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第五篇，完整笔记详见：canvas 核心技术。在上一篇canvas 核心技术-如何实现简单的动画笔记中，我们详细学习了如何进行 canvas 坐标系的平移，缩放，旋转等操作来实现一些比较简单和单一的动画。但是在实际动画中，影响一个动画的…","fields":{"slug":"/post/how_to_implement_complex_animations/"},"frontmatter":{"date":"August 19, 2018","title":"canavs核心技术-如何实现复杂的动画","tags":["canvas"]}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第四篇，完整笔记详见：canvas 核心技术。在前面几篇中，我们回顾了在 canvas 中绘制线段，图形，图片等基本功能，当在制作 2d 游戏或者更为丰富的图表库时，必须提供强大的动画功能。canvas 本身不提供像 css 中属性专门…","fields":{"slug":"/post/how_to_implement_simple_animations/"},"frontmatter":{"date":"August 11, 2018","title":"canvas核心技术-如何实现简单的动画","tags":["canvas"]}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第三篇，完整笔记详见：canvas 核心技术通过上一篇canvas 核心技术-如何绘制图形的学习，我们知道了如何绘制任意多边形以及图片的填充规则。在 canvas 中应用比较多的还有绘制图片和文本。这篇文章，我们就来详细聊聊图片和文本的…","fields":{"slug":"/post/how_to_draw_image_and_text/"},"frontmatter":{"date":"July 27, 2018","title":"canvas核心技术-如何绘制图片和文本","tags":["canvas"]}}},{"node":{"excerpt":"这篇学习和回顾 canvas 系列笔记的第二篇，完整笔记详见：canvas 核心技术通过上一篇canvas 核心技术-如何绘制线段的学习，我们知道了如何去绘制线段。很多的线段的拼接就组成了图形了，比如常见的三角形，矩形，圆形等。常见图形的绘制可以查看我的在线示例：canvas …","fields":{"slug":"/post/how_to_draw_graphics/"},"frontmatter":{"date":"July 18, 2018","title":"canvas核心技术-如何绘制图形","tags":["canvas"]}}},{"node":{"excerpt":"这篇是学习和回顾 canvas 系列笔记的第一篇，完整笔记详见：canvas 核心技术\n学习 canvas，首先得知道如何去绘制线段，然后才能通过很多简单的线段去实现比较复杂的图形，比如常见的图表，柱状图，折线图等都是通过一段一段的线段实现的。canvas 的基础知识不算多，主…","fields":{"slug":"/post/how_to_draw_line/"},"frontmatter":{"date":"July 09, 2018","title":"canvas核心技术-如何绘制线段","tags":["canvas"]}}},{"node":{"excerpt":"最近项目需求中要写较多 H5 小游戏，游戏本身体量不是很复杂，主要是承载较多业务逻辑，所以决定用 canvas 来完成游戏部分。之前只是知道 H5 中有 canvas 这个东西，也知道它大概是画图的，但具体怎么用，还是一无所知的。在MDN在看了一些相关资料，一口气也看了HTML…","fields":{"slug":"/post/core_html5_canvas/"},"frontmatter":{"date":"July 09, 2018","title":"canvas核心技术","tags":["canvas"]}}},{"node":{"excerpt":"现在前端项目的构建一般基本都是基于 webpack 的。项目的技术栈目前比较主流的是 react 全家桶和 vue 全家桶。\n趁空闲，以公司一个项目整理了 webpack 构建常见的流程,这个项目是使用 vue 全家桶开发的。vuetypescriptbabelpostcsse…","fields":{"slug":"/post/process_of_webpack_build_project/"},"frontmatter":{"date":"June 27, 2018","title":"webpack构建常见流程","tags":["webpack"]}}},{"node":{"excerpt":"这个项目主要是用 vue+vuex 实现一个单页面应用，纯粹是熟悉 vue 全家桶相关开发模式，用于练手非常合适。\n着手开发完了之后可以学的东西：熟悉 vue 单文件组件开发方式熟悉如何写一个 vue 插件熟悉如何使用 vue-router 以及挂载路由钩子函数熟悉 vuex …","fields":{"slug":"/post/vue_technology_stack/"},"frontmatter":{"date":"June 15, 2018","title":"vue 全家桶初探","tags":["vue"]}}},{"node":{"excerpt":"React 中比较重要的就是React elements了，可以理解为页面中可看到的节点元素。一个React element的结构为下面这样，\n可以看到比较重要的几个属性：$$typeof，key，props，ref，type。$$typeof：固定为，在验证React ele…","fields":{"slug":"/post/learn_react16_part4/"},"frontmatter":{"date":"April 11, 2018","title":"react 16学习(四)","tags":["react"]}}},{"node":{"excerpt":"ReactDom 在 16 版本中也新增了一些新的功能，比如createPortal，hydrate。今天主要学习一下createPortal。\n先看下 ReactDom 的大致包含的一些属性和方法。可以看到我们熟悉的，，。这里面新增了两个新的方法和。以 unstable_开头…","fields":{"slug":"/post/learn_react16_part3/"},"frontmatter":{"date":"April 04, 2018","title":"react 16学习(三)","tags":["react"]}}},{"node":{"excerpt":"上篇大致说了 react16 的结构，今天来看看 react16 中新增的 Fragment。react16 中新增的可以渲染的类型：和。在 react16 中，的方法现在可以返回一个数组了，而在 react16 之前只能返回一个，一般被包裹着。在实际使用时，页面会输出一些很多…","fields":{"slug":"/post/learn_react16_part2/"},"frontmatter":{"date":"March 02, 2018","title":"React 16学习(二)","tags":["react"]}}},{"node":{"excerpt":"趁着离职期这段时间，制定了一个计划，再次阅读 React16 的源码，React16 是一个大版本的更新，其中新增了许多的新特性，并且重写了核心模块的架构，叫做Fiber，最令人兴奋的是async rendering。之前也浅显的阅读过 React15 的部分源码，发现这次 R…","fields":{"slug":"/post/learn_react16_part1/"},"frontmatter":{"date":"March 01, 2018","title":"React 16学习(-)","tags":["react"]}}},{"node":{"excerpt":"在某次求职过程中，收到了一个笔试题，要求写一个人机对战的五子棋，题目要求如下：请编写一个单机【五子棋】游戏，要求如下：\n使用原生技术实现，兼容 Chrome 浏览器即可。\n实现胜负判断，并给出赢棋提示；任意玩家赢得棋局，锁定棋盘。\n请尽可能的考虑游戏的扩展性，界面可以使用 DO…","fields":{"slug":"/post/gomoku/"},"frontmatter":{"date":"January 23, 2018","title":"简单的五子棋","tags":["javascript","game"]}}},{"node":{"excerpt":"嗯，又到了年末，是时候对 17 年做个了断，好好开始 18 年。\n17 年的年初计划是：找一家靠谱的互联网公司阅读 12 本书报个英语培训班年初，3 月份从广田智能来到了深圳卷皮，是找到了一家互联网公司，很互联网 😂。\n从 PC 端半路子前端到移动端的纯前端了，恶补各种移动端开…","fields":{"slug":"/post/summary_of_2017/"},"frontmatter":{"date":"December 14, 2017","title":"2017年小结","tags":["2017","summary"]}}},{"node":{"excerpt":"最近一个月都在忙公司的新项目会过精选，加上双 11 大促，真的是很忙。加上最近的烦心事比较多，心情一直不是很好，做什么事情，都效率低下。收拾收拾心情，继续努力吧。一切都不会那么糟糕。在做会过精选 M 站时，我们前端组选型的技术栈是 React，Redux，TypeScript。…","fields":{"slug":"/post/note_of_decorator/"},"frontmatter":{"date":"November 26, 2017","title":"笔记之decorator","tags":["decorator","javascript"]}}},{"node":{"excerpt":"在开发微信小程序时，发现缺少了组件化开发体验，在网上找了一波资源，发现都不是很好。其中，有用开发 Vue 的方式去开发小程序，比如，WePY，最后将源代码编译成小程序的官方文件模式。这种方式，开发感觉爽，但是如果小程序版本升级变了之后，不在支持这种方式，那么就得重新开发一套小程…","fields":{"slug":"/post/mini_program_component_programming/"},"frontmatter":{"date":"September 17, 2017","title":"小程序组件化编程","tags":["mini program"]}}},{"node":{"excerpt":"一直想抽时间总结一下现在业界可用的移动端布局方案。需求多，995 模式，身心被掏空，一拖再拖，终于在周六的晚上，做着梦弄完成的，不足之道 😪，请指教改正 🤠。直接采用媒体查询加百分比去布局。核心思想：页面主体布局基本采用百分比去设置。然后，其他块内布局,例如 font-size…","fields":{"slug":"/post/mobile-layout/"},"frontmatter":{"date":"July 31, 2017","title":"移动端布局方案浅谈","tags":["h5","mobile"]}}},{"node":{"excerpt":"在做响应式图片加载需要使用到的两个关键属性就是和 ，这两个属性是 H5 中新加的，是给 img 标签提供多个不同尺寸的图片，在不同设备，不同分辨率的情况下加载不同的图片。当只需要根据屏幕分辨率去选择不同的图片的时候，有 2 种情况。第 1 种，语法形式为：一般屏幕的分辨率会到 …","fields":{"slug":"/post/img_srcset_seizes/"},"frontmatter":{"date":"July 24, 2017","title":"响应式图片加载","tags":["resposive","mobile"]}}},{"node":{"excerpt":"看了这么多框架方面的东西，但注意，基础很重要。今天就来说说 javascipt 中容易忽略的类型转换问题。\n在 javascript 中有 7 种基本类型，它们为：，，，，，，。判断类型的方式是。我们把，，，，，这几类称为原始类型。注意两点，一是，对于函数，实际上也可以认为是，…","fields":{"slug":"/post/explanatio_of_ToPrimitive/"},"frontmatter":{"date":"July 06, 2017","title":"javascript中ToPrimitive详解","tags":["javascript"]}}},{"node":{"excerpt":"众所周知，react 的组件是有一个个的钩子函数，构建成的生命周期，在用 es6 的 class 与用 createClass 有所不同，其中 createClass 还包括了与。由于 createClass  将在后续版本中移除，建议使用 class 形式。所以，下面讨论的都…","fields":{"slug":"/post/react_component_life_cycle/"},"frontmatter":{"date":"June 19, 2017","title":"react组件生命周期浅谈","tags":["react"]}}},{"node":{"excerpt":"ReactMount 为 react-dom 对象提供了和这 2 个方法，其中第一个就是我们常用的输出 react element 到真实的 dom 里。方法实际上提供了三个参数，第一个就是 react element，第二个是页面上真实的 dom，第三个是 callback。…","fields":{"slug":"/post/reactdom_reactmount_source/"},"frontmatter":{"date":"June 10, 2017","title":"阅读react-dom源码--ReactMount部分","tags":["react"]}}},{"node":{"excerpt":"ReactElement 对象为 React 提供了，，，四个方法。ReactElement 是一个工厂方法，不是类模式，不要使用去调用。检查一个对象是否是 react element 对象，通过检查这个对象的是否等于，第一个参数是，实际是一个 Component 的构造函数，…","fields":{"slug":"/post/reactelement_source/"},"frontmatter":{"date":"May 30, 2017","title":"阅读react源码--ReactElement部分","tags":["react"]}}},{"node":{"excerpt":"ReactClass 对象为 React 提供了方法，实际上 ReactClass 有 2 个属性，一个是，另外一个是对象。，接受 1 个参数，一个对象，这个对象必须包含方法；结果返回一个构造函数。注意，方法将在 16.X 版本中移除了，所以现在要用 es6 的语法了。继承 R…","fields":{"slug":"/post/reactclass_source/"},"frontmatter":{"date":"May 22, 2017","title":"阅读react源码--createClass部分","tags":["react"]}}},{"node":{"excerpt":"今天主要看下，实际上是对象上一个构造函数。\n构造函数接受三个参数，，，，实际是在中注入的，它是用来实际更新Component 的原型对象上有这么几个属性，分别是，，，，。其中，和不推荐使用了，后续版本会移除的。是一个空对象。方法，改变组件时应该总是使用这个方法，把看成一个不可变…","fields":{"slug":"/post/react_component_source/"},"frontmatter":{"date":"May 09, 2017","title":"阅读react源码--component部分","tags":["react"]}}},{"node":{"excerpt":"最近打算学习 react 与 redux 的源码，以此记录在学习过程中做的笔记吧。\n先来整体看看 react 的结构吧，实际上 react 就是一个对象，在实际使用的时候是这样的方式查看源码发现，react 对象就是一些包含一些属性的常见对象。常见的属性包括，，，，等。下面就是…","fields":{"slug":"/post/react_whole_construct/"},"frontmatter":{"date":"May 04, 2017","title":"阅读react源码--react整体结构","tags":["react"]}}},{"node":{"excerpt":"单例模式，简单的说就是保证一个特定的类仅有一个实例，也就是不管实例化几次，都是返回的同一个实例。在 javascript 中，没有类的概念，每一个对象字面量都可以是认为是一个单例。对象全等，表示引用的同一个内存地址。在 javascript 中实现单例模式，有如下几种方式：全局…","fields":{"slug":"/post/singleton/"},"frontmatter":{"date":"May 02, 2017","title":"单例模式","tags":["design patterns"]}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}