[{"title":"test","date":"2017-03-29T12:52:46.000Z","path":"2017/03/29/test/","text":"js基本数据类型7种基本数据类型：string,number,boolean,undefined,null,object,symbol(es6新增)。string,number,boolean这3种是原始数据类型，undefined,null是特殊数据类型,object是组合数据类型。object包含，狭义object,function,array。 类型判断：typeof.12345678typeof 1 // &apos;number&apos;,typeof &apos;1&apos; // &apos;string&apos;,typeof true // &apos;boolean&apos;,typeof undefined // &apos;undefined&apos;,typeof null // &apos;object&apos;typeof function()&#123;&#125; // &apos;function&apos;typeof [] // &apos;object&apos;typeof NaN // &apos;number&apos; 类型转化 Numberstring,number,boolean 直接调用Number进行转化。undefined会转为NaN,null会转为0,object类型时，先调用object.valueOf()获取返回值A，如果返回值A也为object,则调用object.toString()获取返回值B，则调用Number(B)进行转换。如果B也是object，则会报错。 number Number(1) // 1 string 123456Number('') // 0Number('1') // 1 Number('a') // NaNNumber(' 1 ') //1 Number会自动忽略开始和结尾的空格Number('1a') // NaN 注意与parseInt的区别parseInt('1a') // 1 Number是整体解析转换，而parseInt是逐个解析字符 boolean Number(true) // 1 Number(false) // 0 undefined Number(undefined) // NaN null Number(null) // 0 object Number({}) // NaN object的valueOf和toString是可以自定义的。例如 var o={ valueOf:funcion(){ return 2; } } Number(o) // 2 var o2={ toString:function(){ return 3; } } Number(o2) // 3 var o3={ valueOf:function(){ return 2 }, toString:function(){ return 3 } } Number(o3) // 2 var o4={ valueOf:function(){ return {}; }, toString:function(){ return {}; } } Number(o4) //Uncaught TypeError: Cannot convert object to primitive value(…)思考Number([1])是多少？Number([1,2])是多少？ StringString()可以将任意类型转为string类型。string,number,boolean原始类型直接转为string类型；undefined转为’undefined’,null转为’null’；object类型转换时，先调用object.toString()方法获取返回值A，如果A是string,number,boolean,undefined,null则直接调用String(A)转化，如果A是object，则继续调用object.valueOf()获取返回值B，如果B是string,number,boolean,undefined,null则直接调用String(B)转化，否则报错。 number String(1) // &apos;1&apos; string String(&apos;1&apos;) // &apos;1&apos; boolean String(true) // &apos;true&apos; String(false) // &apos;false&apos; undefined String(undefined) // &apos;undefined&apos; null String(null) // &apos;null&apos; object String({}) // &apos;[object Object]&apos; object的valueOf和toString是可以自己定义的，例如 var o1={ toString:function(){ return 1; } } String(o1) // &apos;1&apos; var o2={ valueOf:function(){ return 1; } } String(o2) // &apos;[object Object]&apos; var o3={ toString:function(){ return 1; }, valueOf:function(){ return 2; } } String(o3) // &apos;1&apos; var o4={ toString:function(){ return {}; }, valueOf:function(){ return {}; } } String(o4) // Uncaught TypeError: Cannot convert object to primitive value(…) 思考String([1])是多少？String([1,2])是多少？ BooleanBoolean()可以讲任意类型转为boolean类型，转化规则相对简单，除了以下8个转换时为false，其他情况全部都为true。 Boolean(undefined) // false Boolean(null) // false Boolean(false) // false Boolean(&apos;&apos;) // false Boolean(0) // false Boolean(+0) // false Boolean(-0) // false Boolean(NaN) // false 所有的object都会转为true,空对象,空数组或则new Boolean(false)对象，都会被转为true。 Boolean({}) // true Boolean([]) // true Boolean(new Boolean(false)) // true","tags":[{"name":"test","slug":"test","permalink":"http://snayan.com/tags/test/"}]},{"title":"Hello World","date":"2017-03-27T13:10:10.000Z","path":"2017/03/27/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]